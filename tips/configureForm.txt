--------- Avec mes propres options -------
<?php

namespace App\Controller;

use App\Repository\CategoryRepository;
use App\Repository\ProductRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormFactoryInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

class ProductController extends AbstractController
{
    /**
     * @Route("/{slug}", name="product_category")
     */
    public function category($slug, CategoryRepository $categoryRepository): Response
    {
        $category = $categoryRepository->findOneBy([
            'slug' => $slug
        ]);

        if (!$category) {
            throw $this->createNotFoundException("La catégorie demandée n'existe pas !");
        }

        return $this->render('product/category.html.twig', [
            'slug' => $slug,
            'category' => $category
        ]);
    }

    /**
     * @Route("/{category_slug}/{slug}", name="product_show")
     */
    public function show($slug, ProductRepository $productRepository)
    {
        $product = $productRepository->findOneBy([
            'slug' => $slug
        ]);

        if (!$product) {
            throw $this->createNotFoundException("le produit n'existe pas dans notre catalogue.");
        }

        return $this->render('product/show.html.twig', [
            'product' => $product
        ]);
    }

    /**
     * @Route("/admin/product/create", "product_create")
     */
    public function create(FormFactoryInterface $factory, CategoryRepository $categoryRepository)
    {
        $builder = $factory->createBuilder();
        $builder->add('name', TextType::class, [
            'label' => 'Nom du produit',
            'attr' => ['class' => 'form-control', 'placeholder' => 'Entrez le nom du produit']
        ])
            ->add('shortDescription', TextareaType::class, [
                'label' => 'Description courte',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Entrez une courte description du produit'
                ]
            ])
            ->add('price', MoneyType::class, [
                'label' => 'Prix du produit en  ',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Entrez le prix du produit en €'
                ]
            ]);

        $options = [];
        foreach ($categoryRepository->findAll() as $category) {
            $options[$category->getName()] = $category->getId();
        }

        $builder->add('category', ChoiceType::class, [
            'label' => 'Catégories',
            'attr' => ['class' => 'form-control'],
            'placeholder' => '--- Choisir une catégorie ---',
            'choices' => $options
        ]);

        $form = $builder->getForm();
        $formView = $form->createView();

        return $this->render('product/create.html.twig', [
            'formView' => $formView
        ]);
    }
}

------------- AVEC ENTITY TYPE -----------
public function create(FormFactoryInterface $factory)
    {
        $builder = $factory->createBuilder();
        $builder->add('name', TextType::class, [
            'label' => 'Nom du produit',
            'attr' => ['class' => 'form-control', 'placeholder' => 'Entrez le nom du produit']
        ])
            ->add('shortDescription', TextareaType::class, [
                'label' => 'Description courte',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Entrez une courte description du produit'
                ]
            ])
            ->add('price', MoneyType::class, [
                'label' => 'Prix du produit en  ',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Entrez le prix du produit en €'
                ]
            ])
            ->add('category', EntityType::class, [
                'label' => 'Catégories',
                'attr' => ['class' => 'form-control'],
                'placeholder' => '--- Choisir une catégorie ---',
                'class' => Category::class,
                'choice_label' => function (Category $category) {
                    return strtoupper($category->getName());
                } // ou simplement 'name' a la place de la fonction
            ]);

        $form = $builder->getForm();
        $formView = $form->createView();

        return $this->render('product/create.html.twig', [
            'formView' => $formView
        ]);
    }

--------- Exepmle twig avec la décompsoition de {{form}} ----------
{% extends "base.html.twig" %}

{% block title %}
	Création d'un produit
{% endblock %}

{% block body %}
	<h2>Nouveau produit</h2>

	{# {{ form(formView) }} #}
	{{ form_start(formView) }}

	{{ form_errors(formView) }}
	{# {{ form_widget(formView) }} #}
	{# {{ form_row(formView.name) }} #}
		<p>
		{{ form_label(formView.name) }}
		{{ form_errors(formView.name) }}
			<span><em>
			&nbsp; Veillez entrer une description courte
		</em>
		</span>
		{{ form_widget(formView.name) }}
	{{ form_help(formView.name) }}
	</p>

		<p>
	{{ form_row(formView.shortDescription) }}
	</p>
		<p>
	{{ form_row(formView.price) }}
	</p>
		<p>
	{{ form_row(formView.category) }}
	</p>

		<button type="submit" class="btn btn-primary"> <i class="fas fa-save"></i>
		Créer le produit
	</button>

	{{ form_end(formView) }}

{% endblock %}
